/*
 * chat_share_server.cpp
 *
 *  Created on: 2015年9月28日
 *      Author: zjl
 */
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<assert.h>
#include<error.h>
#include<stdio.h>
#include<unistd.h>
#include<errno.h>
#include<string.h>
#include<fcntl.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<sys/epoll.h>
#include<signal.h>
#include<sys/mman.h>
#include<sys/stat.h>

#define USER_LIMIT 5
#define BUFFER_SIZE 1024
#define FD_LIMIT 65535
#define MAX_EVENT_NUMBER 1024
#define PROCESS_LIMIT 65535

struct client_data{
	sockaddr_in address;
	int confd;
	pid_t pid;
	int pipefd[2];
};

static const char* shm_name = "/my_shm";
int sig_pipefd[2];
int epollfd;
int shmfd;
int listenfd;
char * share_mem = 0;
client_data  * users = 0;
int *sub_process = 0;
int user_count =0 ;
bool stop_child = false;
int  setnonblock(int fd){
	int old_option = fcntl(fd,F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd,F_GETFL,new_option);
	return old_option;
}
void sig_handler(int sig){
	int save_errno = errno;
	int msg = sig;
	send(sig_pipefd[1],(char*)&msg,1,0);
	errno = save_errno;
}

void addsig(int sig,void (*handler)(int ),bool restart=true){
	struct sigaction sa;
	memset(&sa,'\0',sizeof(sa));
	sa.__sigaction_handler= handler;
	if(restart){
		sa.sa_flags |= SA_RESTART;
	}
	sigfillset(&sa.sa_mask);
	assert(sigaction(sig,&sa,NULL) != -1);
}

void del_resource(){
	close(sig_pipefd[0]);
	close(sig_pipefd[1]);
	close(listenfd);
	close(epollfd);
	shm_unlink(shm_anme);
	delete [] users;

}































