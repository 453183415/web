/*
 * http_conn.cpp
 *
 *  Created on: 2015年11月6日
 *      Author: zjl
 */

#include "http_conn.h"

const char * ok_200_title = "OK";
const char * error_404_title = "Bad request";
const char * error_400_form = "Your request has bad syntax or is inherently impossible to satisfy.\n";
const char* error_403_title = "Forbidden";
const char * error_403_form = "You do not have permission to get file form this server.\n";
const char * error_404_title = "Not Found";
const char * error_404_form = "The requested file was not found on this server.\n";
const char * erroe_500_title = "Internal Error";
const char* error_500_form = "There was an unusual problem serving the requested file.\n";
const char * doc_root = "/var/www/html";

int setnonblock(int fd){
	int old_option = fcntl(fd, F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd,F_SETFL,new_option);
	return old_option;
}

void addfd(int epollfd,int fd, bool one_set){
	epoll_event event;
	event.data.fd = fd;
	event.events = EPOLLIN |EPOLLET | EPOLLRDHUP;
	if(one_set){
		event.events |= EPOLLONESHOT;
	}
	epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&event);
	setnonblock(fd);
}

void removefd(int epollfd,int fd){
	epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,0);
	close(fd);
}

void modfd(int epollfd,int fd,int ev){
	epoll_event event;
	event.data.fd = fd;
	event.events  =ev |  EPOLLIN|EPOLLONESHOT |EPOLLRDHUP;
	epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&event);
}

int http_conn ::m_user_count =0;
int http_conn::m_epollfd =-1;

void http_conn ::close_conn(bool real_close){
	if(real_close &&(m_epollfd != -1)){
		removefd(m_epollfd,m_sockfd);
		m_sockfd =-1;
		m_user_count --;
	}
}

void http_conn::init(int sockfd,const sockaddr_in &addr){
	m_sockfd = sockfd;
	m_address = addr;
	int reuse = 1;
	setsockopt(m_sockfd,SOL_SOCKET,SO_REUSEADDR,&reuse,sizeof(reuse));
	addfd(m_epollfd,sockfd,true);
	m_user_count++;
	init();
}

void http_conn::init(){
	m_check_state = CHECK_STATE_REQUESTLINE;
	m_linger = false;

	m_method = GET;
	m_url =0;
	m_version = 0;
	m_host = 0;
	m_start_line =0;
	m_checked_idx =0;
	m_read_idx =0;
	m_write_idx =0;
	memset(m_read_buf,'\0',READ_BUFFER_SIZE);
	memset(m_write_buf,'\0',WRITE_BUFFER_SIZE);
	memset(m_real_file,'\0',FILENAME_LEN);
}































