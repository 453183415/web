/*
 * web.cpp
 *
 *  Created on: 2015年11月10日
 *      Author: zjl
 */
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<stdio.h>
#include<unistd.h>
#include<errno.h>
#include<string.h>
#include<fcntl.h>
#include<assert.h>
#include<stdlib.h>
#include<sys/epoll.h>

#include"locker/locker.h"
#include"pthreadpool.h"
#include"http_conn.h"

#define MAX_FD 65535
#define MAX_EVENT_NUMBER 10000

extern int addfd(int epollfd, int fd, bool one_shot);
extern int removefd(int epollfd,int fd);

void addsig(int sig,void (handler)(int),bool restart= true){
	struct sigaction sa;
	memset(&sa,'\0',sizeof(sa));
	sa.__sigaction_handler = handler;
	if(restart ){
		sa.__sigaction_handler |= SA_RESTART;
	}
	sigfillset(&sa.sa_mask);
	assert(sigaction(sig,&sa,NULL) != -1);
}

void show_error (int connfd,const char *info){
	printf("%s",info);
	send(connfd,info,sizeof(info),0);
	close(connfd);
}

int main(int argc,char **argv)
{
	if(argc <= 2){
		printf("usage: %s ip_address port_number\n",basename(argv[0]));
		return 1;
	}
	const char * ip= argv[1];
	int port = atoi(argv[2]);

	addsig(SIGPIPE,SIG_IGN);
	pthreadpool<http_conn> * pool = NULL;
	try{
		pool=new pthreadpool<http_conn>;
	}catch(...){
		return 1;
	}
	http_conn * users = new http_conn[MAX_FD];
	assert(users);
	int user_count;

	int listenfd = socket(PF_INET,SOCK_STREAM,0);
	assert(listenfd >= 0);
	struct linger tmp = {1,0};
	setsockopt(listenfd,SOL_SOCKET,SO_LINGER,&tmp,sizeof(tmp));
	int ret =0;
	struct sockaddr_in address;
	bzero(&address,sizeof(address));
	address.sin_family = AF_INET;
	address.sin_port = htons(port);
	inet_pton(AF_INET,ip,&address.sin_addr);

	ret = bind(listenfd,(struct sockaddr*)&address,sizeof(address));
	assert(ret >= 0);

	ret = listen(listenfd,5);
	assert(ret >=0);

	epoll_event events[MAX_EVENT_NUMBER];
}

























