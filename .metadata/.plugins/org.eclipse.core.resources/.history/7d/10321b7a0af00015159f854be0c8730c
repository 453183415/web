/*
 * read.h
 *
 *  Created on: 2016年3月22日
 *      Author: zjl
 */

#ifndef READ_H_
#define READ_H_
#include<sys/types.h>
#include<fcntl.h>
#include<dirent.h>
#include<sys/stat.h>
#include<stdlib.h>
#include<pthread.h>
#include<iostream>
#include"read_queue.h"

class reader{
	private:
		static reader *reade;
		pthread_mutex_t *mutex;
		read_queue<std::map<int,std::string >>*rd_queue;
	public:
		reader*get_instance();
		static void *handle(void *args);
		void insert_msg(const int &fd, const std::string &path);//向队列中插入要处理的文件和文件描述符
	private:
		virtual ~reader();
		reader();
		void *handle_queue();//处理队列;
};
reader*reader::reade=0;
reader::reader(){
	mutex=new pthread_mutex_t;
	pthread_mutex_init(mutex,NULL);
	rd_queue=NULL;
}
reader::~reader(){
	pthread_mutex_destroy(mutex);
	if(mutex==NULL){
		delete mutex;
	}
	rd_queue->~read_queue();
}

reader * reader::get_instance(){
	if(reader==NULL){
		if(reader == NULL){
			reade = new reader();
		}
	}
	return reader;
}

void reader::insert_msg(const int &fd, const std::string &path){
	std::map<int,std::string>s(fd,path);
	rd_queue->push(s);
}
#endif /* READ_H_ */
