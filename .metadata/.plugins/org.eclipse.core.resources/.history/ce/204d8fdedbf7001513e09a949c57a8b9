/*
 * handle_noactivite.cpp
 *
 *  Created on: 2015年10月1日
 *      Author: zjl
 */


#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<assert.h>
#include<stdio.h>
#include<signal.h>
#include<unistd.h>
#include<error.h>
#include<fcntl.h>
#include<stdlib.h>
#include<sys/epoll.h>
#include<pthread.h>
#include"list_time.h"

#define FD_LIMIT 65536
#define MAX_EVENT_NUMBER 1024
#define TIMELOT 5

static int pipefd[2];
static t_timer timer_list;

static int epollfd;

int setnonblock(int fd){
	int old_option = fcntl(fd, F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd,F_SETFL , new_option);
	return old_option;
}

void addfd(int epollfd, int fd){
	epoll_event event;
	event.data.fd = fd;
	event.events = EPOLLIN | EPOLLET;
	epoll_ctl(epollfd,EPOLL_CTL_ADD, fd ,& event);
	setnonblock(fd);
}

void sig_handler(int sig){
	int save_error = errno;
	int msg = sig;
	send(pipefd[1],(char *)&msg,1,0);
	errno = save_error;

}

void addsig(int sig){
	struct sigaction sa;
	memset(&sa,'\0',sizeof(sa));
	sa.__sigaction_handler = sig_handler;
	sa.sa_flags |= SA_RESTART;
	sigfillset(&sa.sa_mask);
	assert(sigaction(sig,&sa,NULL) != -1);
}

void timer_handler(){
	timer_list
}


















